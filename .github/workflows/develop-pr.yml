name: Develop branch gitflow

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check branch name
  branch-name-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name
        run: |
          # Get the source and target branches for the PR
          SOURCE_BRANCH=$(jq -r .pull_request.head.ref "$GITHUB_EVENT_PATH")
          TARGET_BRANCH=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")

          echo "Source branch: $SOURCE_BRANCH"
          echo "Target branch: $TARGET_BRANCH"

          if [[ "$SOURCE_BRANCH" =~ ^(main|feature/.*|hotfix/.*|release/[0-9]+\.[0-9]+\.[0-9]+(rc[0-9]+)?)$ ]]; then
            echo "Branch name is valid"
          else
            echo "Invalid branch name. Branches must follow the GitFlow naming convention to be allowed to merge into the develop branch."
            exit 1
          fi

  # Run tests on base Python version if Python code has changed
  base-test:
    name: Base Tests - Ubuntu-latest - Python 3.9
    needs: [branch-name-check]
    runs-on: ubuntu-latest
    outputs:
      python-changes: ${{ steps.python-changes.outputs.python-changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Check for changes to Python code to avoid running tests unnecessarily
      - name: Check for changes to Python code
        id: python-changes
        run: |
          if git diff --name-only $SOURCE_BRANCH $TARGET_BRANCH | grep -qE '.*\.py$'; then
            echo "python-changes=true" >> $GITHUB_OUTPUT
          else
            echo "python-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Show Output result for python-changes
        run: echo "python-changes=${{ steps.python-changes.outputs.python-changes }}" 

      - name: Setup Python 3.9
        if: steps.python-changes.outputs.python-changes == 'false'
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          architecture: x64

      - name: Install Poetry
        if: steps.python-changes.outputs.python-changes == 'false'
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        if: steps.python-changes.outputs.python-changes == 'false'
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-v1-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E optimization

      - name: Run tests
        if: steps.python-changes.outputs.python-changes == 'false'
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest tests/ --optimization

      - name: Start Terminal and exit
        if: steps.python-changes.outputs.python-changes == 'false'
        run: |
          source $VENV
          python terminal.py

  # Run tests on all Python versions on multiple OSes
  tests-python:
    name: Vanilla Python Tests - (${{ matrix.python-version }}, ${{ matrix.os }})
    needs: [base-test]
    outputs:
      python-changes: ${{ steps.python-changes.outputs.python-changes }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-latest]
        exclude:
          - os: ubuntu-latest
            python-version: "3.9"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Check for changes to Python code to avoid running tests unnecessarily
      - name: Check for changes to Python code
        id: python-changes
        run: |
          if git diff --name-only $SOURCE_BRANCH $TARGET_BRANCH | grep -qE '.*\.py$'; then
            echo "python-changes=true" >> $GITHUB_OUTPUT
          else
            echo "python-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python ${{ matrix.python-version }}
        if: steps.python-changes.outputs.python-changes == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install Poetry
        if: steps.python-changes.outputs.python-changes == 'true'
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        if: steps.python-changes.outputs.python-changes == 'true'
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-v1-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true' && steps.python-changes.outputs.python-changes == 'true'
        run: poetry install --no-interaction -E optimization

      - name: List installed packages
        if: steps.python-changes.outputs.python-changes == 'true'
        shell: bash -l {0}
        run: |
          source $VENV
          pip list

      - name: Run tests
        if: steps.python-changes.outputs.python-changes == 'true'
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest tests/ --optimization

      - name: Start Terminal and exit
        if: steps.python-changes.outputs.python-changes == 'true'
        run: |
          source $VENV
          python terminal.py