name: Unit Test

on:
  pull_request:
    branches:
      - develop
      - main
    types: [opened, synchronize]
  workflow_run:
    workflows: [Branch Name Check]
    types: [completed]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Check for changes to Python code
  python-changes:
    name: Check for changes to Python code
    runs-on: ubuntu-latest
    outputs:
      python-changes: ${{ steps.python-changes.outputs.python-changes }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Check for changes to Python code to avoid running tests unnecessarily
      - name: Check for changes to Python code
        id: python-changes
        run: |
          if git diff --name-only $SOURCE_BRANCH $TARGET_BRANCH | grep -e '.*\.py$'; then
            echo "python-changes=true" >> $GITHUB_OUTPUT
          else
            echo "python-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Show Output result for python-changes
        run: |
          echo "python-changes=${{ steps.python-changes.outputs.python-changes }}"

  base-test:
    name: Base Tests - Ubuntu-latest - Python 3.9
    needs: [python-changes]
    runs-on: ubuntu-latest
    if: needs.python-changes.outputs.python-changes == 'true'
    steps:
      - name: Show Output result for python-changes
        run: echo "python-changes=${{ needs.python-changes.outputs.python-changes }}"

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-v1-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E optimization

      - name: Run tests
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest tests/ --optimization

      - name: Start Terminal and exit
        run: |
          source $VENV
          python terminal.py

  tests-python:
    name: Vanilla Python Tests - ${{ matrix.python-version }}
    needs: [python-changes, base-test]
    runs-on: ${{ matrix.os }}
    if: needs.python-changes.outputs.python-changes == 'true' && github.event.pull_request.base.ref == 'develop'
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-latest]
        exclude:
          - os: ubuntu-latest
            python-version: "3.9"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-v1-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E optimization

      - name: List installed packages
        shell: bash -l {0}
        run: |
          source $VENV
          pip list

      - name: Run tests
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest tests/ --optimization

      - name: Start Terminal and exit
        run: |
          source $VENV
          python terminal.py
  
  full-test:
    name: Full Test Suite - (${{ matrix.python-version }}, ${{ matrix.os }})
    needs: [base-test]
    runs-on: ${{ matrix.os }}
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macos-latest]
        exclude:
          - os: ubuntu-latest
            python-version: "3.9"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-v1-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E optimization

      - name: List installed packages
        shell: bash -l {0}
        run: |
          source $VENV
          pip list

      - name: Run tests
        env:
          MPLBACKEND: Agg
        run: |
          source $VENV
          pytest tests/ --optimization

      - name: Start Terminal and exit
        run: |
          source $VENV
          python terminal.py

  tests-conda:
    name: Anaconda Python Tests - (${{ matrix.python-version }}, ${{ matrix.os }})
    needs: [base-test]
    runs-on: ${{ matrix.os }}-latest
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu", "windows"]
        python-version: ["3.9"]
        dependencies: [""]
        include:
          - os: ubuntu
            python: 3.9
          - os: windows
            python: 3.9
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python }}
      PYTHONNOUSERSITE: 1

    steps:
      - name: Set git to use LF
        if: runner.os == 'Windows'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Need to fetch more than the last commit so that setuptools-scm can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version still be wrong.
          # Increase if necessary.
          fetch-depth: 100
          # The GitHub token is preserved by default but this job doesn't need
          # to be able to push to GitHub.
          persist-credentials: false

      - name: Setup caching for conda packages
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ runner.os }}-v1-${{ matrix.python }}-${{ hashFiles('build/conda/conda-3-9-env-full.yaml') }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python }}
          miniconda-version: "latest"
          auto-update-conda: true
          channels: conda-forge,defaults
          show-channel-urls: true
          channel-priority: flexible
          environment-file: build/conda/conda-3-9-env.yaml
          activate-environment: testing
          # Needed for caching
          use-only-tar-bz2: true

      - name: Update Temp permissions on windows
        if: runner.os == 'Windows'
        shell: cmd /C CALL {0}
        run: >-
          c:\windows\system32\icacls C:\Users\runneradmin\AppData\Local\Temp /grant "everyone":F /t

      - name: Get pip cache dir
        shell: bash -l {0}
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-v1-3-9-pip-${{ hashFiles('requirements-full.txt') }}
          restore-keys: |
            ${{ runner.os }}-v1-pip-

      - name: Uninstall Brotlipy
        shell: bash -l {0}
        run: |
          conda remove brotlipy -y

      - name: Install dependencies (Bash)
        shell: bash -l {0}
        run: |
          pip install --requirement requirements-full.txt

      - name: List installed packages (Bash)
        shell: bash -l {0}
        run: |
          conda list
          pip list

      - name: Run tests (Bash)
        env:
          MPLBACKEND: Agg
        shell: bash -l {0}
        run: pytest tests/ -m "not linux" --optimization

      - name: Start Terminal and exit
        shell: bash -l {0}
        run: python terminal.py
